---
description: Applies general coding rules across all file types to maintain code quality, consistency, and prevent common errors.
globs: **/*.*
alwaysApply: false
---
# General Coding Rules

## Code Quality Core Principles

- Always verify information before presenting it. Do not make assumptions or speculate without clear evidence.
- Make changes file by file and give code reviewers a chance to spot mistakes.
- Write concise, technical responses with accurate examples.
- Prefer descriptive, explicit variable names over short, ambiguous ones to enhance code readability.
- Adhere to the existing coding style in the project for consistency.
- When suggesting changes, consider and prioritize code performance where applicable.
- Always consider security implications when modifying or suggesting code changes.
- Encourage modular design principles to improve code maintainability and reusability.
- Ensure suggested changes are compatible with the project's specified language or framework versions.

## Constants Over Magic Numbers

- Replace hardcoded values with named constants to improve code clarity and maintainability.
- Use descriptive constant names that explain the value's purpose.
- Keep constants at the top of the file or in a dedicated constants file.

## Meaningful Names

- Variables, functions, and classes should reveal their purpose.
- Names should explain why something exists and how it's used.
- Avoid abbreviations unless they're universally understood.
- Use descriptive variable names with auxiliary verbs (e.g., is_active, has_permission).

## Smart Comments

- Don't comment on what the code does - make the code self-documenting.
- Use comments to explain why something is done a certain way.
- Document APIs, complex algorithms, and non-obvious side effects.

## Single Responsibility

- Each function should do exactly one thing.
- Functions should be small and focused.
- If a function needs a comment to explain what it does, it should be split.

## DRY (Don't Repeat Yourself)

- Extract repeated code into reusable functions.
- Share common logic through proper abstraction.
- Maintain single sources of truth.
- Prefer iteration and modularization over code duplication.

## Clean Structure

- Approach emphasizes a clear project structure with separate directories for source code, tests, docs, and config.
- Keep related code together.
- Organize code in a logical hierarchy.
- Use consistent file and folder naming conventions.

## Encapsulation

- Hide implementation details.
- Expose clear interfaces.
- Move nested conditionals into well-named functions.

## Code Quality Maintenance

- Refactor continuously.
- Fix technical debt early.
- Leave code cleaner than you found it.
- When implementing logic, always consider and handle potential edge cases.
- Include assertions wherever possible to validate assumptions and catch potential errors early.

## Do Not

- Don't suggest whitespace changes unless fixing actual layout issues.
- Don't invent changes other than what's explicitly requested.
- Don't remove unrelated code or functionalities. Pay attention to preserving existing structures.
